# 工作流名称
name: 每8个小时更新一次reference

# 触发工作流的事件
on:
  schedule:
    - cron: '0 */8 * * *' # 每8小时运行一次（在每天的 0:00, 8:00, 16:00 UTC）
    #- cron: '*/5 * * * *'
  workflow_dispatch:  # 允许手动触发工作流

# 定义工作流中的作业
jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout forked repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 获取完整历史

    - name: Configure Git
      run: |
        git config user.name 'github-actions[bot]'
        git config user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Sync with upstream
      run: |
        git remote add upstream https://github.com/jaywcjlove/reference.git
        git fetch upstream
        
        # 输出当前分支和上游分支的最新提交哈希
        echo "当前分支最新提交："
        git rev-parse HEAD
        echo "上游分支最新提交："
        git rev-parse upstream/main
        
        # 保存当前 HEAD
        BEFORE_MERGE=$(git rev-parse HEAD)
        
        # 尝试合并上游更改
        git merge upstream/main --no-edit || true

    - name: Check for changes
      run: |
        AFTER_MERGE=$(git rev-parse HEAD)
        if [ "$BEFORE_MERGE" = "$AFTER_MERGE" ]; then
          echo "没有检测到新的更改。"
        else
          echo "检测到以下更改："
          git diff --name-status $BEFORE_MERGE $AFTER_MERGE
        fi

    - name: Push changes
      run: |
        git push origin main || git push --force origin main

    - name: Verify sync
      run: |
        # 再次获取上游更新
        git fetch upstream
        
        # 比较本地主分支和上游主分支
        LOCAL=$(git rev-parse HEAD)
        UPSTREAM=$(git rev-parse upstream/main)
        
        if [ "$LOCAL" = "$UPSTREAM" ]; then
          echo "同步成功：本地分支与上游分支一致。"
        else
          echo "警告：本地分支与上游分支不一致。"
          echo "本地分支: $LOCAL"
          echo "上游分支: $UPSTREAM"
        fi
        
        # 显示最近的提交日志
        echo "最近的提交日志："
        git log --oneline -n 5
